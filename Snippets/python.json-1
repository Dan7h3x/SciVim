{"lambda":{"prefix":"lambda","body":["lambda ${1:parameter, list}: ${2:expression}"],"description":"Creates a lambda function, an anonymous function in python."},"else":{"body":["else:","\t${1:pass}"],"prefix":"else"},"elif":{"prefix":"elif","body":["elif ${1:expression}:","\t${2:pass}"]},"def \/ function":{"prefix":["def","function"],"body":["def ${1:name}($2) -> ${3|None,str,int,dict|}:","\t\"\"\"${4:Insert docstring.}\"\"\"","$0"],"description":"function with docstring"},"replace (regex)":{"body":"re.sub(r\"${1:regex}\", r\"${2:replace}\", ${3:str})$0","prefix":"replace (regex)"},"if":{"body":"if ${1:condition}:\n\t${2:pass}$0","prefix":"if"},"while":{"body":"while ${1:condition}:\n\t${2:pass}$0","prefix":"while"},"ternary":{"body":"${1:value1} if ${2:condition} else ${3:value2}","prefix":"ternary"},"for each (key\/value)":{"body":["for ${1:key}, ${2:value} in enumerate(${3:list}):","\t${3:pass}"],"prefix":"for each (key\/value)"},"__main__":{"prefix":["__main__","ifmain"],"body":["if __name__ == \"__main__\":","\t${1:main()}$0"],"description":"Create implicitly all the code at the top level using the __name__ special variable."},"for each (list)":{"prefix":"for each (list)","body":["for ${1:var} in ${2:list}:","\t${3:pass}"],"description":"desc"},"list comprehension":{"prefix":"list comprehension","body":"list(${1:value} for ${2:value} in ${3:iterable})$0","description":"List comprehension for creating a list based on existing lists."},"if\/else":{"body":["if ${1:condition}:","\t${2:pass}","else:","\t${3:pass}"],"prefix":"if\/else"}}