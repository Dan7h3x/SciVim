{
    "require": {
        "prefix": "req",
        "body": ["require(${1:module})"],
        "description": "Require module"
    },
    "return": {
        "prefix": "rt",
        "body": ["return $0"],
        "description": "Return value"
    },
    "assigment": {
        "prefix": "ll",
        "body": ["local ${1:varName} = ${0:value}"],
        "description": "Define a variable"
    },
    "local": {
        "prefix": "l",
        "body": ["local ${0}"],
        "description": "Declare a variable"
    },
    "locreq": {
        "prefix": "lreq",
        "body": ["local ${1:module} = require(\"${2:$1}\")$0"],
        "description": "Require module as a variable"
    },
    "class": {
        "prefix": "cl",
        "body": [
            "${1:M} = {}\n",
            "$1.${2:new} = function($3)",
            "\t${6}",
            "end"
        ],
        "description": "Create a class"
    },
    "if": {
        "prefix": "if",
        "body": ["if ${1:true} then", "\t$0", "end"]
    },
    "elseif": {
        "prefix": "elseif",
        "body": ["elseif ${1:true} then", "\t$0"]
    },
    "for": {
        "prefix": "for",
        "body": ["for $1 do", "\t$0", "end"],
        "description": "for statement"
    },
    "for-numeric": {
        "prefix": "forn",
        "body": ["for ${1:i} = ${2:1}, ${3:10} do", "\t$0", "end"],
        "description": "for numeric range statement"
    },
    "for-ipairs": {
        "prefix": "fori",
        "body": ["for ${1:i}, ${2:x} in ipairs(${3:t}) do", "\t$0", "end"],
        "description": "for i, x in ipairs(t)"
    },
    "for-pairs": {
        "prefix": "forp",
        "body": ["for ${1:k}, ${2:v} in pairs(${3:t}) do", "\t$0", "end"],
        "description": "for k, v in pairs(t)"
    },
    "forline": {
        "prefix": "forline",
        "body": [
            "local f = io.open(${1:${2:filename}}, \"${3:r}\")\n",
            "while true do",
            "\tline = f:read()",
            "\tif line == nil then break end\n",
            "\t${0}",
            "end"
        ],
        "description": "Read file line by line"
    },
    "function": {
        "prefix": "fu",
        "body": ["function ${1:name}($2)", "\t${0}", "end"],
        "description": "Define a function"
    },
    "assign-function": {
        "prefix": "f=",
        "body": ["${1:name} = function($2)", "\t${0}", "end"],
        "description": "Assign a function to a variable"
    },
    "local-function": {
        "prefix": "lfu",
        "body": ["local function ${1:name}($2)", "\t${0}", "end"],
        "description": "Define a local function"
    },
    "local-assign-function": {
        "prefix": "lf=",
        "body": ["local ${1:name} = function($2)", "\t${0}", "end"],
        "description": "Assign a function to a local variable"
    },
    "anonymous-function": {
        "prefix": "f)",
        "body": ["function($1)", "\t${0}", "end"],
        "description": "Create an anonymous function"
    },
    "member-function": {
        "prefix": "f,",
        "body": ["${1:name} = function($2)", "\t${0}", "end,"],
        "description": "Assign a function to a table key"
    },
    "print": {
        "prefix": "p",
        "body": ["print(${0})"]
    },
    "self": {
        "prefix": "self:",
        "body": ["function self:${1:methodName}($2)", "\t$0", "end"]
    },
    "while": {
        "prefix": "while",
        "body": ["while ${1:true} do", "\t$0", "end"]
    },
    "pcall": {
        "prefix": "pca",
        "body": ["pcall(${1:function})"],
        "description": "Protect call a function"
    },
    "locpcall": {
        "prefix": "lpca",
        "body": ["local ${1:status}, ${2:err_or_value} = pcall(${3:function})"],
        "description": "Protect call a function as a variable"
    }
}
