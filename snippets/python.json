{
  "Shebang": {
    "prefix": "shebang",
    "body": "#!/usr/bin/env python",
    "description": "Python shebang line"
  },

  "Main Guard": {
    "prefix": "main",
    "body": ["if __name__ == \"__main__\":", "    ${1:main()}", ""],
    "description": "Python main function guard"
  },

  "Function": {
    "prefix": "def",
    "body": [
      "def ${1:function_name}(${2:args}):",
      "    \"\"\"${3:Docstring}\"\"\"",
      "    ${0:pass}"
    ],
    "description": "Python function with docstring"
  },

  "Class": {
    "prefix": "cl",
    "body": [
      "class ${1:ClassName}:",
      "    \"\"\"${2:Docstring}\"\"\"",
      "",
      "    def __init__(self, ${3:args}):",
      "        ${0:pass}"
    ],
    "description": "Python class with __init__"
  },

  "Try-Except": {
    "prefix": "try",
    "body": [
      "try:",
      "    ${1:pass}",
      "except ${2:Exception} as e:",
      "    ${3:raise}",
      "else:",
      "    ${4:pass}",
      "finally:",
      "    ${5:pass}"
    ],
    "description": "Try-except block"
  },

  "List Comprehension": {
    "prefix": "lc",
    "body": "[${1:x} for ${1:x} in ${2:iterable} if ${3:condition}]",
    "description": "List comprehension"
  },

  "Pytest Fixture": {
    "prefix": "fixture",
    "body": [
      "@pytest.fixture",
      "def ${1:fixture_name}():",
      "    ${2:setup}",
      "    yield",
      "    ${3:teardown}"
    ],
    "description": "Pytest fixture with yield"
  },

  "Logging": {
    "prefix": "log",
    "body": [
      "import logging",
      "",
      "logging.basicConfig(",
      "    level=logging.${1|INFO,DEBUG,WARNING,ERROR|},",
      "    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
      ")",
      "logger = logging.getLogger(__name__)"
    ],
    "description": "Configure Python logging"
  },

  "Type Hint Function": {
    "prefix": "tdef",
    "body": [
      "def ${1:function_name}(${2:arg}: ${3:type}) -> ${4:return_type}:",
      "    \"\"\"${5:Docstring}\"\"\"",
      "    ${0:pass}"
    ],
    "description": "Type-hinted function"
  },

  "Dataclass": {
    "prefix": "dataclass",
    "body": [
      "@dataclass",
      "class ${1:ClassName}:",
      "    ${2:field}: ${3:type}",
      "    ${4:field2}: ${5:type} = ${6:default}"
    ],
    "description": "Python dataclass"
  }
}
